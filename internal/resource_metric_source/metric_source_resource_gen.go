// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_metric_source

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func MetricSourceResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"custom_field_mapping": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"formula": schema.StringAttribute{
							Required:            true,
							Description:         "The formula or expression used to compute the custom field value.",
							MarkdownDescription: "The formula or expression used to compute the custom field value.",
						},
						"key": schema.StringAttribute{
							Required:            true,
							Description:         "The identifier for the custom field mapping.",
							MarkdownDescription: "The identifier for the custom field mapping.",
						},
					},
					CustomType: CustomFieldMappingType{
						ObjectType: types.ObjectType{
							AttrTypes: CustomFieldMappingValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Optional array defining mappings for custom fields using specific formulas.",
				MarkdownDescription: "Optional array defining mappings for custom fields using specific formulas.",
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "An optional description for the metric source, providing context and details about its purpose and usage.",
				MarkdownDescription: "An optional description for the metric source, providing context and details about its purpose and usage.",
			},
			"id_type_mapping": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"column": schema.StringAttribute{
							Required:            true,
							Description:         "The corresponding column name in the source that relates to the Statsig unit ID.",
							MarkdownDescription: "The corresponding column name in the source that relates to the Statsig unit ID.",
						},
						"statsig_unit_id": schema.StringAttribute{
							Required:            true,
							Description:         "The identifier mapping for Statsig units.",
							MarkdownDescription: "The identifier mapping for Statsig units.",
						},
					},
					CustomType: IdTypeMappingType{
						ObjectType: types.ObjectType{
							AttrTypes: IdTypeMappingValue{}.AttributeTypes(ctx),
						},
					},
				},
				Required:            true,
				Description:         "Array defining the mapping between Statsig unit IDs and their respective source columns.",
				MarkdownDescription: "Array defining the mapping between Statsig unit IDs and their respective source columns.",
			},
			"is_read_only": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Specifies if the source can only be edited via the Console API.",
				MarkdownDescription: "Specifies if the source can only be edited via the Console API.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the metric source, serving as its primary identifier.",
				MarkdownDescription: "The name of the metric source, serving as its primary identifier.",
			},
			"owner": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"owner_email": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The email of the owner. This field is optional.",
						MarkdownDescription: "The email of the owner. This field is optional.",
					},
					"owner_id": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "ID of the owner",
						MarkdownDescription: "ID of the owner",
					},
					"owner_name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The name of the owner. This field is optional.",
						MarkdownDescription: "The name of the owner. This field is optional.",
					},
					"owner_type": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Type of the owner (e.g., SDK_KEY or USER)",
						MarkdownDescription: "Type of the owner (e.g., SDK_KEY or USER)",
					},
				},
				CustomType: OwnerType{
					ObjectType: types.ObjectType{
						AttrTypes: OwnerValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.",
				MarkdownDescription: "Schema for owner data including ID, type, name. Note that if Entity is created by CONSOLE API, owner will be undefined.",
			},
			"source_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The type of source, indicating whether it is a database table or a custom query.",
				MarkdownDescription: "The type of source, indicating whether it is a database table or a custom query.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"table",
						"query",
					),
				},
			},
			"sql": schema.StringAttribute{
				Required:            true,
				Description:         "The SQL query or statement used to extract data from the metric source.",
				MarkdownDescription: "The SQL query or statement used to extract data from the metric source.",
			},
			"table_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The name of the database table if the source type is \"table\".",
				MarkdownDescription: "The name of the database table if the source type is \"table\".",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.",
				MarkdownDescription: "Optional array of tags to categorize the metric source, facilitating easier organization and retrieval.",
			},
			"timestamp_as_day": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether the timestamp should be treated as a day-level granularity.",
				MarkdownDescription: "Indicates whether the timestamp should be treated as a day-level granularity.",
			},
			"timestamp_column": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the column containing timestamp data for the metric source.",
				MarkdownDescription: "The name of the column containing timestamp data for the metric source.",
			},
		},
	}
}

type MetricSourceModel struct {
	CustomFieldMapping types.List   `tfsdk:"custom_field_mapping"`
	Description        types.String `tfsdk:"description"`
	IdTypeMapping      types.List   `tfsdk:"id_type_mapping"`
	IsReadOnly         types.Bool   `tfsdk:"is_read_only"`
	Name               types.String `tfsdk:"name"`
	Owner              OwnerValue   `tfsdk:"owner"`
	SourceType         types.String `tfsdk:"source_type"`
	Sql                types.String `tfsdk:"sql"`
	TableName          types.String `tfsdk:"table_name"`
	Tags               types.List   `tfsdk:"tags"`
	TimestampAsDay     types.Bool   `tfsdk:"timestamp_as_day"`
	TimestampColumn    types.String `tfsdk:"timestamp_column"`
}

var _ basetypes.ObjectTypable = CustomFieldMappingType{}

type CustomFieldMappingType struct {
	basetypes.ObjectType
}

func (t CustomFieldMappingType) Equal(o attr.Type) bool {
	other, ok := o.(CustomFieldMappingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CustomFieldMappingType) String() string {
	return "CustomFieldMappingType"
}

func (t CustomFieldMappingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	formulaAttribute, ok := attributes["formula"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`formula is missing from object`)

		return nil, diags
	}

	formulaVal, ok := formulaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`formula expected to be basetypes.StringValue, was: %T`, formulaAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CustomFieldMappingValue{
		Formula: formulaVal,
		Key:     keyVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldMappingValueNull() CustomFieldMappingValue {
	return CustomFieldMappingValue{
		state: attr.ValueStateNull,
	}
}

func NewCustomFieldMappingValueUnknown() CustomFieldMappingValue {
	return CustomFieldMappingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCustomFieldMappingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CustomFieldMappingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CustomFieldMappingValue Attribute Value",
				"While creating a CustomFieldMappingValue value, a missing attribute value was detected. "+
					"A CustomFieldMappingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldMappingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CustomFieldMappingValue Attribute Type",
				"While creating a CustomFieldMappingValue value, an invalid attribute value was detected. "+
					"A CustomFieldMappingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldMappingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CustomFieldMappingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CustomFieldMappingValue Attribute Value",
				"While creating a CustomFieldMappingValue value, an extra attribute value was detected. "+
					"A CustomFieldMappingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CustomFieldMappingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCustomFieldMappingValueUnknown(), diags
	}

	formulaAttribute, ok := attributes["formula"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`formula is missing from object`)

		return NewCustomFieldMappingValueUnknown(), diags
	}

	formulaVal, ok := formulaAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`formula expected to be basetypes.StringValue, was: %T`, formulaAttribute))
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewCustomFieldMappingValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	if diags.HasError() {
		return NewCustomFieldMappingValueUnknown(), diags
	}

	return CustomFieldMappingValue{
		Formula: formulaVal,
		Key:     keyVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldMappingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CustomFieldMappingValue {
	object, diags := NewCustomFieldMappingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCustomFieldMappingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CustomFieldMappingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCustomFieldMappingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCustomFieldMappingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCustomFieldMappingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCustomFieldMappingValueMust(CustomFieldMappingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CustomFieldMappingType) ValueType(ctx context.Context) attr.Value {
	return CustomFieldMappingValue{}
}

var _ basetypes.ObjectValuable = CustomFieldMappingValue{}

type CustomFieldMappingValue struct {
	Formula basetypes.StringValue `tfsdk:"formula"`
	Key     basetypes.StringValue `tfsdk:"key"`
	state   attr.ValueState
}

func (v CustomFieldMappingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["formula"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Formula.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["formula"] = val

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CustomFieldMappingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CustomFieldMappingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CustomFieldMappingValue) String() string {
	return "CustomFieldMappingValue"
}

func (v CustomFieldMappingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"formula": basetypes.StringType{},
			"key":     basetypes.StringType{},
		},
		map[string]attr.Value{
			"formula": v.Formula,
			"key":     v.Key,
		})

	return objVal, diags
}

func (v CustomFieldMappingValue) Equal(o attr.Value) bool {
	other, ok := o.(CustomFieldMappingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Formula.Equal(other.Formula) {
		return false
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	return true
}

func (v CustomFieldMappingValue) Type(ctx context.Context) attr.Type {
	return CustomFieldMappingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CustomFieldMappingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"formula": basetypes.StringType{},
		"key":     basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = IdTypeMappingType{}

type IdTypeMappingType struct {
	basetypes.ObjectType
}

func (t IdTypeMappingType) Equal(o attr.Type) bool {
	other, ok := o.(IdTypeMappingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IdTypeMappingType) String() string {
	return "IdTypeMappingType"
}

func (t IdTypeMappingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	columnAttribute, ok := attributes["column"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`column is missing from object`)

		return nil, diags
	}

	columnVal, ok := columnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`column expected to be basetypes.StringValue, was: %T`, columnAttribute))
	}

	statsigUnitIdAttribute, ok := attributes["statsig_unit_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`statsig_unit_id is missing from object`)

		return nil, diags
	}

	statsigUnitIdVal, ok := statsigUnitIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`statsig_unit_id expected to be basetypes.StringValue, was: %T`, statsigUnitIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IdTypeMappingValue{
		Column:        columnVal,
		StatsigUnitId: statsigUnitIdVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewIdTypeMappingValueNull() IdTypeMappingValue {
	return IdTypeMappingValue{
		state: attr.ValueStateNull,
	}
}

func NewIdTypeMappingValueUnknown() IdTypeMappingValue {
	return IdTypeMappingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIdTypeMappingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IdTypeMappingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IdTypeMappingValue Attribute Value",
				"While creating a IdTypeMappingValue value, a missing attribute value was detected. "+
					"A IdTypeMappingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IdTypeMappingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IdTypeMappingValue Attribute Type",
				"While creating a IdTypeMappingValue value, an invalid attribute value was detected. "+
					"A IdTypeMappingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IdTypeMappingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IdTypeMappingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IdTypeMappingValue Attribute Value",
				"While creating a IdTypeMappingValue value, an extra attribute value was detected. "+
					"A IdTypeMappingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IdTypeMappingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIdTypeMappingValueUnknown(), diags
	}

	columnAttribute, ok := attributes["column"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`column is missing from object`)

		return NewIdTypeMappingValueUnknown(), diags
	}

	columnVal, ok := columnAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`column expected to be basetypes.StringValue, was: %T`, columnAttribute))
	}

	statsigUnitIdAttribute, ok := attributes["statsig_unit_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`statsig_unit_id is missing from object`)

		return NewIdTypeMappingValueUnknown(), diags
	}

	statsigUnitIdVal, ok := statsigUnitIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`statsig_unit_id expected to be basetypes.StringValue, was: %T`, statsigUnitIdAttribute))
	}

	if diags.HasError() {
		return NewIdTypeMappingValueUnknown(), diags
	}

	return IdTypeMappingValue{
		Column:        columnVal,
		StatsigUnitId: statsigUnitIdVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewIdTypeMappingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IdTypeMappingValue {
	object, diags := NewIdTypeMappingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIdTypeMappingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IdTypeMappingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIdTypeMappingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIdTypeMappingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIdTypeMappingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIdTypeMappingValueMust(IdTypeMappingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IdTypeMappingType) ValueType(ctx context.Context) attr.Value {
	return IdTypeMappingValue{}
}

var _ basetypes.ObjectValuable = IdTypeMappingValue{}

type IdTypeMappingValue struct {
	Column        basetypes.StringValue `tfsdk:"column"`
	StatsigUnitId basetypes.StringValue `tfsdk:"statsig_unit_id"`
	state         attr.ValueState
}

func (v IdTypeMappingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["column"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["statsig_unit_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Column.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["column"] = val

		val, err = v.StatsigUnitId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["statsig_unit_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IdTypeMappingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IdTypeMappingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IdTypeMappingValue) String() string {
	return "IdTypeMappingValue"
}

func (v IdTypeMappingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"column":          basetypes.StringType{},
			"statsig_unit_id": basetypes.StringType{},
		},
		map[string]attr.Value{
			"column":          v.Column,
			"statsig_unit_id": v.StatsigUnitId,
		})

	return objVal, diags
}

func (v IdTypeMappingValue) Equal(o attr.Value) bool {
	other, ok := o.(IdTypeMappingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Column.Equal(other.Column) {
		return false
	}

	if !v.StatsigUnitId.Equal(other.StatsigUnitId) {
		return false
	}

	return true
}

func (v IdTypeMappingValue) Type(ctx context.Context) attr.Type {
	return IdTypeMappingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IdTypeMappingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"column":          basetypes.StringType{},
		"statsig_unit_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = OwnerType{}

type OwnerType struct {
	basetypes.ObjectType
}

func (t OwnerType) Equal(o attr.Type) bool {
	other, ok := o.(OwnerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OwnerType) String() string {
	return "OwnerType"
}

func (t OwnerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ownerEmailAttribute, ok := attributes["owner_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_email is missing from object`)

		return nil, diags
	}

	ownerEmailVal, ok := ownerEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_email expected to be basetypes.StringValue, was: %T`, ownerEmailAttribute))
	}

	ownerIdAttribute, ok := attributes["owner_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_id is missing from object`)

		return nil, diags
	}

	ownerIdVal, ok := ownerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_id expected to be basetypes.StringValue, was: %T`, ownerIdAttribute))
	}

	ownerNameAttribute, ok := attributes["owner_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_name is missing from object`)

		return nil, diags
	}

	ownerNameVal, ok := ownerNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_name expected to be basetypes.StringValue, was: %T`, ownerNameAttribute))
	}

	ownerTypeAttribute, ok := attributes["owner_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_type is missing from object`)

		return nil, diags
	}

	ownerTypeVal, ok := ownerTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_type expected to be basetypes.StringValue, was: %T`, ownerTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OwnerValue{
		OwnerEmail: ownerEmailVal,
		OwnerId:    ownerIdVal,
		OwnerName:  ownerNameVal,
		OwnerType:  ownerTypeVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewOwnerValueNull() OwnerValue {
	return OwnerValue{
		state: attr.ValueStateNull,
	}
}

func NewOwnerValueUnknown() OwnerValue {
	return OwnerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOwnerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OwnerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OwnerValue Attribute Value",
				"While creating a OwnerValue value, a missing attribute value was detected. "+
					"A OwnerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OwnerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OwnerValue Attribute Type",
				"While creating a OwnerValue value, an invalid attribute value was detected. "+
					"A OwnerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OwnerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OwnerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OwnerValue Attribute Value",
				"While creating a OwnerValue value, an extra attribute value was detected. "+
					"A OwnerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OwnerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOwnerValueUnknown(), diags
	}

	ownerEmailAttribute, ok := attributes["owner_email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_email is missing from object`)

		return NewOwnerValueUnknown(), diags
	}

	ownerEmailVal, ok := ownerEmailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_email expected to be basetypes.StringValue, was: %T`, ownerEmailAttribute))
	}

	ownerIdAttribute, ok := attributes["owner_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_id is missing from object`)

		return NewOwnerValueUnknown(), diags
	}

	ownerIdVal, ok := ownerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_id expected to be basetypes.StringValue, was: %T`, ownerIdAttribute))
	}

	ownerNameAttribute, ok := attributes["owner_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_name is missing from object`)

		return NewOwnerValueUnknown(), diags
	}

	ownerNameVal, ok := ownerNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_name expected to be basetypes.StringValue, was: %T`, ownerNameAttribute))
	}

	ownerTypeAttribute, ok := attributes["owner_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`owner_type is missing from object`)

		return NewOwnerValueUnknown(), diags
	}

	ownerTypeVal, ok := ownerTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`owner_type expected to be basetypes.StringValue, was: %T`, ownerTypeAttribute))
	}

	if diags.HasError() {
		return NewOwnerValueUnknown(), diags
	}

	return OwnerValue{
		OwnerEmail: ownerEmailVal,
		OwnerId:    ownerIdVal,
		OwnerName:  ownerNameVal,
		OwnerType:  ownerTypeVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewOwnerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OwnerValue {
	object, diags := NewOwnerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOwnerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OwnerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOwnerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOwnerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOwnerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOwnerValueMust(OwnerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OwnerType) ValueType(ctx context.Context) attr.Value {
	return OwnerValue{}
}

var _ basetypes.ObjectValuable = OwnerValue{}

type OwnerValue struct {
	OwnerEmail basetypes.StringValue `tfsdk:"owner_email"`
	OwnerId    basetypes.StringValue `tfsdk:"owner_id"`
	OwnerName  basetypes.StringValue `tfsdk:"owner_name"`
	OwnerType  basetypes.StringValue `tfsdk:"owner_type"`
	state      attr.ValueState
}

func (v OwnerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["owner_email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["owner_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["owner_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["owner_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.OwnerEmail.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["owner_email"] = val

		val, err = v.OwnerId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["owner_id"] = val

		val, err = v.OwnerName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["owner_name"] = val

		val, err = v.OwnerType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["owner_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OwnerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OwnerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OwnerValue) String() string {
	return "OwnerValue"
}

func (v OwnerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"owner_email": basetypes.StringType{},
			"owner_id":    basetypes.StringType{},
			"owner_name":  basetypes.StringType{},
			"owner_type":  basetypes.StringType{},
		},
		map[string]attr.Value{
			"owner_email": v.OwnerEmail,
			"owner_id":    v.OwnerId,
			"owner_name":  v.OwnerName,
			"owner_type":  v.OwnerType,
		})

	return objVal, diags
}

func (v OwnerValue) Equal(o attr.Value) bool {
	other, ok := o.(OwnerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.OwnerEmail.Equal(other.OwnerEmail) {
		return false
	}

	if !v.OwnerId.Equal(other.OwnerId) {
		return false
	}

	if !v.OwnerName.Equal(other.OwnerName) {
		return false
	}

	if !v.OwnerType.Equal(other.OwnerType) {
		return false
	}

	return true
}

func (v OwnerValue) Type(ctx context.Context) attr.Type {
	return OwnerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OwnerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"owner_email": basetypes.StringType{},
		"owner_id":    basetypes.StringType{},
		"owner_name":  basetypes.StringType{},
		"owner_type":  basetypes.StringType{},
	}
}
