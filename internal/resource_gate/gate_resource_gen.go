// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_gate

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func GateResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"creator_email": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"creator_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"description": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1000),
				},
			},
			"id": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]*$"), ""),
				},
			},
			"id_type": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"is_enabled": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"measure_metric_lifts": schema.BoolAttribute{
				Optional: true,
				Computed: true,
			},
			"monitoring_metrics": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"type": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
					},
					CustomType: MonitoringMetricsType{
						ObjectType: types.ObjectType{
							AttrTypes: MonitoringMetricsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "id",
				MarkdownDescription: "id",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\- ]*$"), ""),
				},
			},
			"rules": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"base_id": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout",
							MarkdownDescription: "The base ID of this rule, i.e. without any added metadata. Will remain the exact same throughout",
						},
						"conditions": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"custom_id": schema.StringAttribute{
										Optional: true,
										Computed: true,
									},
									"field": schema.StringAttribute{
										Optional: true,
										Computed: true,
									},
									"operator": schema.StringAttribute{
										Optional: true,
										Computed: true,
									},
									"target_value": schema.ListAttribute{
										ElementType: types.StringType,
										Optional:    true,
										Computed:    true,
									},
									"type": schema.StringAttribute{
										Required: true,
										Validators: []validator.String{
											stringvalidator.OneOf(
												"app_version",
												"browser_name",
												"browser_version",
												"country",
												"custom_field",
												"email",
												"environment_tier",
												"fails_gate",
												"fails_segment",
												"ip_address",
												"locale",
												"os_name",
												"os_version",
												"passes_gate",
												"passes_segment",
												"public",
												"time",
												"unit_id",
												"user_id",
												"url",
												"javascript",
												"device_model",
												"target_app",
											),
										},
									},
								},
								CustomType: ConditionsType{
									ObjectType: types.ObjectType{
										AttrTypes: ConditionsValue{}.AttributeTypes(ctx),
									},
								},
							},
							Required:            true,
							Description:         "An array of Condition objects.",
							MarkdownDescription: "An array of Condition objects.",
						},
						"environments": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "The environments this rule is enabled for.",
							MarkdownDescription: "The environments this rule is enabled for.",
						},
						"id": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The Statsig ID of this rule.",
							MarkdownDescription: "The Statsig ID of this rule.",
						},
						"name": schema.StringAttribute{
							Required:            true,
							Description:         "The name of this rule.",
							MarkdownDescription: "The name of this rule.",
						},
						"pass_percentage": schema.NumberAttribute{
							Required:            true,
							Description:         "Of the users that meet the conditions of this rule, what percent should return true.",
							MarkdownDescription: "Of the users that meet the conditions of this rule, what percent should return true.",
						},
						"return_value": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{},
							CustomType: ReturnValueType{
								ObjectType: types.ObjectType{
									AttrTypes: ReturnValueValue{}.AttributeTypes(ctx),
								},
							},
							Optional:            true,
							Computed:            true,
							Description:         "The return value of the rule.",
							MarkdownDescription: "The return value of the rule.",
						},
					},
					CustomType: RulesType{
						ObjectType: types.ObjectType{
							AttrTypes: RulesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional: true,
				Computed: true,
			},
			"tags": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"target_apps": schema.ListAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
			},
			"team": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"type": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"PERMANENT",
						"TEMPORARY",
					),
				},
			},
		},
	}
}

type GateModel struct {
	CreatorEmail       types.String `tfsdk:"creator_email"`
	CreatorId          types.String `tfsdk:"creator_id"`
	Description        types.String `tfsdk:"description"`
	Id                 types.String `tfsdk:"id"`
	IdType             types.String `tfsdk:"id_type"`
	IsEnabled          types.Bool   `tfsdk:"is_enabled"`
	MeasureMetricLifts types.Bool   `tfsdk:"measure_metric_lifts"`
	MonitoringMetrics  types.List   `tfsdk:"monitoring_metrics"`
	Name               types.String `tfsdk:"name"`
	Rules              types.List   `tfsdk:"rules"`
	Tags               types.List   `tfsdk:"tags"`
	TargetApps         types.List   `tfsdk:"target_apps"`
	Team               types.String `tfsdk:"team"`
	Type               types.String `tfsdk:"type"`
}

var _ basetypes.ObjectTypable = MonitoringMetricsType{}

type MonitoringMetricsType struct {
	basetypes.ObjectType
}

func (t MonitoringMetricsType) Equal(o attr.Type) bool {
	other, ok := o.(MonitoringMetricsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MonitoringMetricsType) String() string {
	return "MonitoringMetricsType"
}

func (t MonitoringMetricsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MonitoringMetricsValue{
		Name:                  nameVal,
		MonitoringMetricsType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMonitoringMetricsValueNull() MonitoringMetricsValue {
	return MonitoringMetricsValue{
		state: attr.ValueStateNull,
	}
}

func NewMonitoringMetricsValueUnknown() MonitoringMetricsValue {
	return MonitoringMetricsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMonitoringMetricsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MonitoringMetricsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MonitoringMetricsValue Attribute Value",
				"While creating a MonitoringMetricsValue value, a missing attribute value was detected. "+
					"A MonitoringMetricsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MonitoringMetricsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MonitoringMetricsValue Attribute Type",
				"While creating a MonitoringMetricsValue value, an invalid attribute value was detected. "+
					"A MonitoringMetricsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MonitoringMetricsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MonitoringMetricsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MonitoringMetricsValue Attribute Value",
				"While creating a MonitoringMetricsValue value, an extra attribute value was detected. "+
					"A MonitoringMetricsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MonitoringMetricsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMonitoringMetricsValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMonitoringMetricsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewMonitoringMetricsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewMonitoringMetricsValueUnknown(), diags
	}

	return MonitoringMetricsValue{
		Name:                  nameVal,
		MonitoringMetricsType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMonitoringMetricsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MonitoringMetricsValue {
	object, diags := NewMonitoringMetricsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMonitoringMetricsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MonitoringMetricsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMonitoringMetricsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMonitoringMetricsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMonitoringMetricsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMonitoringMetricsValueMust(MonitoringMetricsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MonitoringMetricsType) ValueType(ctx context.Context) attr.Value {
	return MonitoringMetricsValue{}
}

var _ basetypes.ObjectValuable = MonitoringMetricsValue{}

type MonitoringMetricsValue struct {
	Name                  basetypes.StringValue `tfsdk:"name"`
	MonitoringMetricsType basetypes.StringValue `tfsdk:"type"`
	state                 attr.ValueState
}

func (v MonitoringMetricsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.MonitoringMetricsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MonitoringMetricsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MonitoringMetricsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MonitoringMetricsValue) String() string {
	return "MonitoringMetricsValue"
}

func (v MonitoringMetricsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name": basetypes.StringType{},
			"type": basetypes.StringType{},
		},
		map[string]attr.Value{
			"name": v.Name,
			"type": v.MonitoringMetricsType,
		})

	return objVal, diags
}

func (v MonitoringMetricsValue) Equal(o attr.Value) bool {
	other, ok := o.(MonitoringMetricsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.MonitoringMetricsType.Equal(other.MonitoringMetricsType) {
		return false
	}

	return true
}

func (v MonitoringMetricsValue) Type(ctx context.Context) attr.Type {
	return MonitoringMetricsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MonitoringMetricsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name": basetypes.StringType{},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RulesType{}

type RulesType struct {
	basetypes.ObjectType
}

func (t RulesType) Equal(o attr.Type) bool {
	other, ok := o.(RulesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RulesType) String() string {
	return "RulesType"
}

func (t RulesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	baseIdAttribute, ok := attributes["base_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`base_id is missing from object`)

		return nil, diags
	}

	baseIdVal, ok := baseIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`base_id expected to be basetypes.StringValue, was: %T`, baseIdAttribute))
	}

	conditionsAttribute, ok := attributes["conditions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`conditions is missing from object`)

		return nil, diags
	}

	conditionsVal, ok := conditionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`conditions expected to be basetypes.ListValue, was: %T`, conditionsAttribute))
	}

	environmentsAttribute, ok := attributes["environments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environments is missing from object`)

		return nil, diags
	}

	environmentsVal, ok := environmentsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environments expected to be basetypes.ListValue, was: %T`, environmentsAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	passPercentageAttribute, ok := attributes["pass_percentage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pass_percentage is missing from object`)

		return nil, diags
	}

	passPercentageVal, ok := passPercentageAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pass_percentage expected to be basetypes.NumberValue, was: %T`, passPercentageAttribute))
	}

	returnValueAttribute, ok := attributes["return_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`return_value is missing from object`)

		return nil, diags
	}

	returnValueVal, ok := returnValueAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`return_value expected to be basetypes.ObjectValue, was: %T`, returnValueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RulesValue{
		BaseId:         baseIdVal,
		Conditions:     conditionsVal,
		Environments:   environmentsVal,
		Id:             idVal,
		Name:           nameVal,
		PassPercentage: passPercentageVal,
		ReturnValue:    returnValueVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewRulesValueNull() RulesValue {
	return RulesValue{
		state: attr.ValueStateNull,
	}
}

func NewRulesValueUnknown() RulesValue {
	return RulesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRulesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RulesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RulesValue Attribute Value",
				"While creating a RulesValue value, a missing attribute value was detected. "+
					"A RulesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RulesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RulesValue Attribute Type",
				"While creating a RulesValue value, an invalid attribute value was detected. "+
					"A RulesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RulesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RulesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RulesValue Attribute Value",
				"While creating a RulesValue value, an extra attribute value was detected. "+
					"A RulesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RulesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRulesValueUnknown(), diags
	}

	baseIdAttribute, ok := attributes["base_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`base_id is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	baseIdVal, ok := baseIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`base_id expected to be basetypes.StringValue, was: %T`, baseIdAttribute))
	}

	conditionsAttribute, ok := attributes["conditions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`conditions is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	conditionsVal, ok := conditionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`conditions expected to be basetypes.ListValue, was: %T`, conditionsAttribute))
	}

	environmentsAttribute, ok := attributes["environments"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`environments is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	environmentsVal, ok := environmentsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`environments expected to be basetypes.ListValue, was: %T`, environmentsAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	passPercentageAttribute, ok := attributes["pass_percentage"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`pass_percentage is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	passPercentageVal, ok := passPercentageAttribute.(basetypes.NumberValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`pass_percentage expected to be basetypes.NumberValue, was: %T`, passPercentageAttribute))
	}

	returnValueAttribute, ok := attributes["return_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`return_value is missing from object`)

		return NewRulesValueUnknown(), diags
	}

	returnValueVal, ok := returnValueAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`return_value expected to be basetypes.ObjectValue, was: %T`, returnValueAttribute))
	}

	if diags.HasError() {
		return NewRulesValueUnknown(), diags
	}

	return RulesValue{
		BaseId:         baseIdVal,
		Conditions:     conditionsVal,
		Environments:   environmentsVal,
		Id:             idVal,
		Name:           nameVal,
		PassPercentage: passPercentageVal,
		ReturnValue:    returnValueVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewRulesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RulesValue {
	object, diags := NewRulesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRulesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RulesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRulesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRulesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRulesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRulesValueMust(RulesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RulesType) ValueType(ctx context.Context) attr.Value {
	return RulesValue{}
}

var _ basetypes.ObjectValuable = RulesValue{}

type RulesValue struct {
	BaseId         basetypes.StringValue `tfsdk:"base_id"`
	Conditions     basetypes.ListValue   `tfsdk:"conditions"`
	Environments   basetypes.ListValue   `tfsdk:"environments"`
	Id             basetypes.StringValue `tfsdk:"id"`
	Name           basetypes.StringValue `tfsdk:"name"`
	PassPercentage basetypes.NumberValue `tfsdk:"pass_percentage"`
	ReturnValue    basetypes.ObjectValue `tfsdk:"return_value"`
	state          attr.ValueState
}

func (v RulesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["base_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["conditions"] = basetypes.ListType{
		ElemType: ConditionsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["environments"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["pass_percentage"] = basetypes.NumberType{}.TerraformType(ctx)
	attrTypes["return_value"] = basetypes.ObjectType{
		AttrTypes: ReturnValueValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.BaseId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["base_id"] = val

		val, err = v.Conditions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["conditions"] = val

		val, err = v.Environments.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["environments"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PassPercentage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["pass_percentage"] = val

		val, err = v.ReturnValue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["return_value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RulesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RulesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RulesValue) String() string {
	return "RulesValue"
}

func (v RulesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	conditions := types.ListValueMust(
		ConditionsType{
			basetypes.ObjectType{
				AttrTypes: ConditionsValue{}.AttributeTypes(ctx),
			},
		},
		v.Conditions.Elements(),
	)

	if v.Conditions.IsNull() {
		conditions = types.ListNull(
			ConditionsType{
				basetypes.ObjectType{
					AttrTypes: ConditionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Conditions.IsUnknown() {
		conditions = types.ListUnknown(
			ConditionsType{
				basetypes.ObjectType{
					AttrTypes: ConditionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var returnValue basetypes.ObjectValue

	if v.ReturnValue.IsNull() {
		returnValue = types.ObjectNull(
			ReturnValueValue{}.AttributeTypes(ctx),
		)
	}

	if v.ReturnValue.IsUnknown() {
		returnValue = types.ObjectUnknown(
			ReturnValueValue{}.AttributeTypes(ctx),
		)
	}

	if !v.ReturnValue.IsNull() && !v.ReturnValue.IsUnknown() {
		returnValue = types.ObjectValueMust(
			ReturnValueValue{}.AttributeTypes(ctx),
			v.ReturnValue.Attributes(),
		)
	}

	environmentsVal, d := types.ListValue(types.StringType, v.Environments.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"base_id": basetypes.StringType{},
			"conditions": basetypes.ListType{
				ElemType: ConditionsValue{}.Type(ctx),
			},
			"environments": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":              basetypes.StringType{},
			"name":            basetypes.StringType{},
			"pass_percentage": basetypes.NumberType{},
			"return_value": basetypes.ObjectType{
				AttrTypes: ReturnValueValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"base_id": basetypes.StringType{},
			"conditions": basetypes.ListType{
				ElemType: ConditionsValue{}.Type(ctx),
			},
			"environments": basetypes.ListType{
				ElemType: types.StringType,
			},
			"id":              basetypes.StringType{},
			"name":            basetypes.StringType{},
			"pass_percentage": basetypes.NumberType{},
			"return_value": basetypes.ObjectType{
				AttrTypes: ReturnValueValue{}.AttributeTypes(ctx),
			},
		},
		map[string]attr.Value{
			"base_id":         v.BaseId,
			"conditions":      conditions,
			"environments":    environmentsVal,
			"id":              v.Id,
			"name":            v.Name,
			"pass_percentage": v.PassPercentage,
			"return_value":    returnValue,
		})

	return objVal, diags
}

func (v RulesValue) Equal(o attr.Value) bool {
	other, ok := o.(RulesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.BaseId.Equal(other.BaseId) {
		return false
	}

	if !v.Conditions.Equal(other.Conditions) {
		return false
	}

	if !v.Environments.Equal(other.Environments) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PassPercentage.Equal(other.PassPercentage) {
		return false
	}

	if !v.ReturnValue.Equal(other.ReturnValue) {
		return false
	}

	return true
}

func (v RulesValue) Type(ctx context.Context) attr.Type {
	return RulesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RulesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"base_id": basetypes.StringType{},
		"conditions": basetypes.ListType{
			ElemType: ConditionsValue{}.Type(ctx),
		},
		"environments": basetypes.ListType{
			ElemType: types.StringType,
		},
		"id":              basetypes.StringType{},
		"name":            basetypes.StringType{},
		"pass_percentage": basetypes.NumberType{},
		"return_value": basetypes.ObjectType{
			AttrTypes: ReturnValueValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ConditionsType{}

type ConditionsType struct {
	basetypes.ObjectType
}

func (t ConditionsType) Equal(o attr.Type) bool {
	other, ok := o.(ConditionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ConditionsType) String() string {
	return "ConditionsType"
}

func (t ConditionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	customIdAttribute, ok := attributes["custom_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_id is missing from object`)

		return nil, diags
	}

	customIdVal, ok := customIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_id expected to be basetypes.StringValue, was: %T`, customIdAttribute))
	}

	fieldAttribute, ok := attributes["field"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field is missing from object`)

		return nil, diags
	}

	fieldVal, ok := fieldAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field expected to be basetypes.StringValue, was: %T`, fieldAttribute))
	}

	operatorAttribute, ok := attributes["operator"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operator is missing from object`)

		return nil, diags
	}

	operatorVal, ok := operatorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operator expected to be basetypes.StringValue, was: %T`, operatorAttribute))
	}

	targetValueAttribute, ok := attributes["target_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_value is missing from object`)

		return nil, diags
	}

	targetValueVal, ok := targetValueAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_value expected to be basetypes.ListValue, was: %T`, targetValueAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ConditionsValue{
		CustomId:       customIdVal,
		Field:          fieldVal,
		Operator:       operatorVal,
		TargetValue:    targetValueVal,
		ConditionsType: typeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewConditionsValueNull() ConditionsValue {
	return ConditionsValue{
		state: attr.ValueStateNull,
	}
}

func NewConditionsValueUnknown() ConditionsValue {
	return ConditionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewConditionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ConditionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ConditionsValue Attribute Value",
				"While creating a ConditionsValue value, a missing attribute value was detected. "+
					"A ConditionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConditionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ConditionsValue Attribute Type",
				"While creating a ConditionsValue value, an invalid attribute value was detected. "+
					"A ConditionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ConditionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ConditionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ConditionsValue Attribute Value",
				"While creating a ConditionsValue value, an extra attribute value was detected. "+
					"A ConditionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ConditionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewConditionsValueUnknown(), diags
	}

	customIdAttribute, ok := attributes["custom_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_id is missing from object`)

		return NewConditionsValueUnknown(), diags
	}

	customIdVal, ok := customIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_id expected to be basetypes.StringValue, was: %T`, customIdAttribute))
	}

	fieldAttribute, ok := attributes["field"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`field is missing from object`)

		return NewConditionsValueUnknown(), diags
	}

	fieldVal, ok := fieldAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`field expected to be basetypes.StringValue, was: %T`, fieldAttribute))
	}

	operatorAttribute, ok := attributes["operator"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`operator is missing from object`)

		return NewConditionsValueUnknown(), diags
	}

	operatorVal, ok := operatorAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`operator expected to be basetypes.StringValue, was: %T`, operatorAttribute))
	}

	targetValueAttribute, ok := attributes["target_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target_value is missing from object`)

		return NewConditionsValueUnknown(), diags
	}

	targetValueVal, ok := targetValueAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target_value expected to be basetypes.ListValue, was: %T`, targetValueAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewConditionsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewConditionsValueUnknown(), diags
	}

	return ConditionsValue{
		CustomId:       customIdVal,
		Field:          fieldVal,
		Operator:       operatorVal,
		TargetValue:    targetValueVal,
		ConditionsType: typeVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewConditionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ConditionsValue {
	object, diags := NewConditionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewConditionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ConditionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewConditionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewConditionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewConditionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewConditionsValueMust(ConditionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ConditionsType) ValueType(ctx context.Context) attr.Value {
	return ConditionsValue{}
}

var _ basetypes.ObjectValuable = ConditionsValue{}

type ConditionsValue struct {
	CustomId       basetypes.StringValue `tfsdk:"custom_id"`
	Field          basetypes.StringValue `tfsdk:"field"`
	Operator       basetypes.StringValue `tfsdk:"operator"`
	TargetValue    basetypes.ListValue   `tfsdk:"target_value"`
	ConditionsType basetypes.StringValue `tfsdk:"type"`
	state          attr.ValueState
}

func (v ConditionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["custom_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["field"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["operator"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["target_value"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CustomId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_id"] = val

		val, err = v.Field.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["field"] = val

		val, err = v.Operator.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["operator"] = val

		val, err = v.TargetValue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target_value"] = val

		val, err = v.ConditionsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ConditionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ConditionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ConditionsValue) String() string {
	return "ConditionsValue"
}

func (v ConditionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	targetValueVal, d := types.ListValue(types.StringType, v.TargetValue.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"custom_id": basetypes.StringType{},
			"field":     basetypes.StringType{},
			"operator":  basetypes.StringType{},
			"target_value": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"custom_id": basetypes.StringType{},
			"field":     basetypes.StringType{},
			"operator":  basetypes.StringType{},
			"target_value": basetypes.ListType{
				ElemType: types.StringType,
			},
			"type": basetypes.StringType{},
		},
		map[string]attr.Value{
			"custom_id":    v.CustomId,
			"field":        v.Field,
			"operator":     v.Operator,
			"target_value": targetValueVal,
			"type":         v.ConditionsType,
		})

	return objVal, diags
}

func (v ConditionsValue) Equal(o attr.Value) bool {
	other, ok := o.(ConditionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CustomId.Equal(other.CustomId) {
		return false
	}

	if !v.Field.Equal(other.Field) {
		return false
	}

	if !v.Operator.Equal(other.Operator) {
		return false
	}

	if !v.TargetValue.Equal(other.TargetValue) {
		return false
	}

	if !v.ConditionsType.Equal(other.ConditionsType) {
		return false
	}

	return true
}

func (v ConditionsValue) Type(ctx context.Context) attr.Type {
	return ConditionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ConditionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"custom_id": basetypes.StringType{},
		"field":     basetypes.StringType{},
		"operator":  basetypes.StringType{},
		"target_value": basetypes.ListType{
			ElemType: types.StringType,
		},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ReturnValueType{}

type ReturnValueType struct {
	basetypes.ObjectType
}

func (t ReturnValueType) Equal(o attr.Type) bool {
	other, ok := o.(ReturnValueType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ReturnValueType) String() string {
	return "ReturnValueType"
}

func (t ReturnValueType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return ReturnValueValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewReturnValueValueNull() ReturnValueValue {
	return ReturnValueValue{
		state: attr.ValueStateNull,
	}
}

func NewReturnValueValueUnknown() ReturnValueValue {
	return ReturnValueValue{
		state: attr.ValueStateUnknown,
	}
}

func NewReturnValueValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ReturnValueValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ReturnValueValue Attribute Value",
				"While creating a ReturnValueValue value, a missing attribute value was detected. "+
					"A ReturnValueValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReturnValueValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ReturnValueValue Attribute Type",
				"While creating a ReturnValueValue value, an invalid attribute value was detected. "+
					"A ReturnValueValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ReturnValueValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ReturnValueValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ReturnValueValue Attribute Value",
				"While creating a ReturnValueValue value, an extra attribute value was detected. "+
					"A ReturnValueValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ReturnValueValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewReturnValueValueUnknown(), diags
	}

	if diags.HasError() {
		return NewReturnValueValueUnknown(), diags
	}

	return ReturnValueValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewReturnValueValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ReturnValueValue {
	object, diags := NewReturnValueValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewReturnValueValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ReturnValueType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewReturnValueValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewReturnValueValueUnknown(), nil
	}

	if in.IsNull() {
		return NewReturnValueValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewReturnValueValueMust(ReturnValueValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ReturnValueType) ValueType(ctx context.Context) attr.Value {
	return ReturnValueValue{}
}

var _ basetypes.ObjectValuable = ReturnValueValue{}

type ReturnValueValue struct {
	state attr.ValueState
}

func (v ReturnValueValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ReturnValueValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ReturnValueValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ReturnValueValue) String() string {
	return "ReturnValueValue"
}

func (v ReturnValueValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{},
		map[string]attr.Value{})

	return objVal, diags
}

func (v ReturnValueValue) Equal(o attr.Value) bool {
	other, ok := o.(ReturnValueValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v ReturnValueValue) Type(ctx context.Context) attr.Type {
	return ReturnValueType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ReturnValueValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
