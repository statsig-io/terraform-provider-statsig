// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_experiment

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ExperimentResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allocation": schema.Float64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Percent of layer allocated to this experiment",
				MarkdownDescription: "Percent of layer allocated to this experiment",
			},
			"allocation_duration": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native Only - Allocation duration in days",
				MarkdownDescription: "Warehouse Native Only - Allocation duration in days",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"analysis_end_time": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native only - end time for analysis only experiments",
				MarkdownDescription: "Warehouse Native only - end time for analysis only experiments",
			},
			"analytics_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The mode of analysis for the experiment, e.g frequentist, bayesian, sprt",
				MarkdownDescription: "The mode of analysis for the experiment, e.g frequentist, bayesian, sprt",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"frequentist",
						"bayesian",
						"sprt",
					),
				},
			},
			"assignment_source_experiment_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the source experiment for assignment",
				MarkdownDescription: "Name of the source experiment for assignment",
			},
			"assignment_source_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Source name of the assignment",
				MarkdownDescription: "Source name of the assignment",
			},
			"benjamini_hochberg_per_metric": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Is Benjamini-Hochberg procedure applied per metric?",
				MarkdownDescription: "Is Benjamini-Hochberg procedure applied per metric?",
			},
			"benjamini_hochberg_per_variant": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Is Benjamini-Hochberg procedure applied per variant?",
				MarkdownDescription: "Is Benjamini-Hochberg procedure applied per variant?",
			},
			"benjamini_primary_metrics_only": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Is Benjamini-Hochberg procedure applied for primary metrics only?",
				MarkdownDescription: "Is Benjamini-Hochberg procedure applied for primary metrics only?",
			},
			"bonferroni_correction": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Is Bonferroni correction applied per variant?",
				MarkdownDescription: "Is Bonferroni correction applied per variant?",
			},
			"bonferroni_correction_per_metric": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Is Bonferroni correction applied per metric?",
				MarkdownDescription: "Is Bonferroni correction applied per metric?",
			},
			"cohort_wait_until_end_to_include": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists",
				MarkdownDescription: "Warehouse Native Only - Whether to filter to units whose experiment cohort analysis duration is complete, if cohortedAnalysisDuration exists",
			},
			"cohorted_analysis_duration": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native Only - Cohorted analysis duration in days",
				MarkdownDescription: "Warehouse Native Only - Cohorted analysis duration in days",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"cohorted_metrics_mature_after_end": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native Only - Allow cohort metrics to mature after experiment end",
				MarkdownDescription: "Warehouse Native Only - Allow cohort metrics to mature after experiment end",
			},
			"control_group_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Optional control group ID",
				MarkdownDescription: "Optional control group ID",
			},
			"creator_email": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The email of the creator of this experiment",
				MarkdownDescription: "The email of the creator of this experiment",
			},
			"creator_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The Statsig ID of the creator of this experiment",
				MarkdownDescription: "The Statsig ID of the creator of this experiment",
			},
			"default_confidence_interval": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Default error margin used for results",
				MarkdownDescription: "Default error margin used for results",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"80",
						"90",
						"95",
						"98",
						"99",
					),
				},
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A description of the new experiment",
				MarkdownDescription: "A description of the new experiment",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1000),
				},
			},
			"duration": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "How long the experiment is expected to last in days",
				MarkdownDescription: "How long the experiment is expected to last in days",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"fixed_analysis_duration": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Fixed analysis duration in days",
				MarkdownDescription: "Fixed analysis duration in days",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"groups": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"disabled": schema.BoolAttribute{
							Optional: true,
							Computed: true,
						},
						"foreign_group_id": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"id": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"name": schema.StringAttribute{
							Required: true,
						},
						"parameter_values": schema.MapAttribute{
							ElementType: types.StringType,
							Required:    true,
						},
						"size": schema.Float64Attribute{
							Required: true,
						},
					},
					CustomType: GroupsType{
						ObjectType: types.ObjectType{
							AttrTypes: GroupsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The test groups for your experiment",
				MarkdownDescription: "The test groups for your experiment",
			},
			"hypothesis": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A statement that will be tested by this experiment",
				MarkdownDescription: "A statement that will be tested by this experiment",
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The experiment name ID",
				MarkdownDescription: "The experiment name ID",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_-]*$"), ""),
				},
			},
			"id_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The idType the experiment will be performed on",
				MarkdownDescription: "The idType the experiment will be performed on",
			},
			"is_analysis_only": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "For Warehouse Native",
				MarkdownDescription: "For Warehouse Native",
			},
			"launched_group_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "ID of the launched group, null otherwise",
				MarkdownDescription: "ID of the launched group, null otherwise",
			},
			"layer_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Which layer to place the experiment into.",
				MarkdownDescription: "Which layer to place the experiment into.",
			},
			"links": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"title": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "The title of the link",
							MarkdownDescription: "The title of the link",
						},
						"url": schema.StringAttribute{
							Required:            true,
							Description:         "The URL of the link",
							MarkdownDescription: "The URL of the link",
						},
					},
					CustomType: LinksType{
						ObjectType: types.ObjectType{
							AttrTypes: LinksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Links to relevant documentation or resources",
				MarkdownDescription: "Links to relevant documentation or resources",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The experiment display name",
				MarkdownDescription: "The experiment display name",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 100),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-zA-Z0-9_\\- ]*$"), ""),
				},
			},
			"primary_metric_tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Primary metric tags for the experiment",
				MarkdownDescription: "Primary metric tags for the experiment",
			},
			"primary_metrics": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"direction": schema.StringAttribute{
							Optional: true,
							Computed: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"increase",
									"decrease",
								),
							},
						},
						"hypothesized_value": schema.Float64Attribute{
							Optional: true,
							Computed: true,
						},
						"name": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"type": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
					},
					CustomType: PrimaryMetricsType{
						ObjectType: types.ObjectType{
							AttrTypes: PrimaryMetricsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Main metrics needed to evaluate your hypothesis",
				MarkdownDescription: "Main metrics needed to evaluate your hypothesis",
			},
			"scheduled_reload_hour": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native only - UTC hour at which to run scheduled pulse loads",
				MarkdownDescription: "Warehouse Native only - UTC hour at which to run scheduled pulse loads",
				Validators: []validator.Int64{
					int64validator.Between(0, 23),
				},
			},
			"scheduled_reload_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Warehouse Native only - reload type for scheduled reloads",
				MarkdownDescription: "Warehouse Native only - reload type for scheduled reloads",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"full",
						"incremental",
					),
				},
			},
			"secondary_idtype": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The secondary ID type for the experiment used in WHN for ID resolution",
				MarkdownDescription: "The secondary ID type for the experiment used in WHN for ID resolution",
			},
			"secondary_metric_tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Secondary metric tags for the experiment",
				MarkdownDescription: "Secondary metric tags for the experiment",
			},
			"secondary_metrics": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"direction": schema.StringAttribute{
							Optional: true,
							Computed: true,
							Validators: []validator.String{
								stringvalidator.OneOf(
									"increase",
									"decrease",
								),
							},
						},
						"hypothesized_value": schema.Float64Attribute{
							Optional: true,
							Computed: true,
						},
						"name": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
						"type": schema.StringAttribute{
							Optional: true,
							Computed: true,
						},
					},
					CustomType: SecondaryMetricsType{
						ObjectType: types.ObjectType{
							AttrTypes: SecondaryMetricsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Additional metrics to monitor that might impact the analysis or final decision of the experiment",
				MarkdownDescription: "Additional metrics to monitor that might impact the analysis or final decision of the experiment",
			},
			"sequential_testing": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Apply sequential testing?",
				MarkdownDescription: "Apply sequential testing?",
			},
			"status": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The current status of the experiment",
				MarkdownDescription: "The current status of the experiment",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"active",
						"setup",
						"decision_made",
						"abandoned",
						"archived",
						"experiment_stopped",
						"assignment_stopped",
					),
				},
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Tags associated with the experiment",
				MarkdownDescription: "Tags associated with the experiment",
			},
			"target_apps": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "Target apps assigned to this experiment",
				MarkdownDescription: "Target apps assigned to this experiment",
			},
			"target_exposures": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Target exposures for the experiment",
				MarkdownDescription: "Target exposures for the experiment",
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"targeting_gate_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Restrict your experiment to users passing the selected feature gate",
				MarkdownDescription: "Restrict your experiment to users passing the selected feature gate",
			},
			"team": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enterprise only",
				MarkdownDescription: "Enterprise only",
			},
		},
	}
}

type ExperimentModel struct {
	Allocation                     types.Float64 `tfsdk:"allocation"`
	AllocationDuration             types.Int64   `tfsdk:"allocation_duration"`
	AnalysisEndTime                types.String  `tfsdk:"analysis_end_time"`
	AnalyticsType                  types.String  `tfsdk:"analytics_type"`
	AssignmentSourceExperimentName types.String  `tfsdk:"assignment_source_experiment_name"`
	AssignmentSourceName           types.String  `tfsdk:"assignment_source_name"`
	BenjaminiHochbergPerMetric     types.Bool    `tfsdk:"benjamini_hochberg_per_metric"`
	BenjaminiHochbergPerVariant    types.Bool    `tfsdk:"benjamini_hochberg_per_variant"`
	BenjaminiPrimaryMetricsOnly    types.Bool    `tfsdk:"benjamini_primary_metrics_only"`
	BonferroniCorrection           types.Bool    `tfsdk:"bonferroni_correction"`
	BonferroniCorrectionPerMetric  types.Bool    `tfsdk:"bonferroni_correction_per_metric"`
	CohortWaitUntilEndToInclude    types.Bool    `tfsdk:"cohort_wait_until_end_to_include"`
	CohortedAnalysisDuration       types.Int64   `tfsdk:"cohorted_analysis_duration"`
	CohortedMetricsMatureAfterEnd  types.Bool    `tfsdk:"cohorted_metrics_mature_after_end"`
	ControlGroupId                 types.String  `tfsdk:"control_group_id"`
	CreatorEmail                   types.String  `tfsdk:"creator_email"`
	CreatorId                      types.String  `tfsdk:"creator_id"`
	DefaultConfidenceInterval      types.String  `tfsdk:"default_confidence_interval"`
	Description                    types.String  `tfsdk:"description"`
	Duration                       types.Int64   `tfsdk:"duration"`
	FixedAnalysisDuration          types.Int64   `tfsdk:"fixed_analysis_duration"`
	Groups                         types.List    `tfsdk:"groups"`
	Hypothesis                     types.String  `tfsdk:"hypothesis"`
	Id                             types.String  `tfsdk:"id"`
	IdType                         types.String  `tfsdk:"id_type"`
	IsAnalysisOnly                 types.Bool    `tfsdk:"is_analysis_only"`
	LaunchedGroupId                types.String  `tfsdk:"launched_group_id"`
	LayerId                        types.String  `tfsdk:"layer_id"`
	Links                          types.List    `tfsdk:"links"`
	Name                           types.String  `tfsdk:"name"`
	PrimaryMetricTags              types.List    `tfsdk:"primary_metric_tags"`
	PrimaryMetrics                 types.List    `tfsdk:"primary_metrics"`
	ScheduledReloadHour            types.Int64   `tfsdk:"scheduled_reload_hour"`
	ScheduledReloadType            types.String  `tfsdk:"scheduled_reload_type"`
	SecondaryIdtype                types.String  `tfsdk:"secondary_idtype"`
	SecondaryMetricTags            types.List    `tfsdk:"secondary_metric_tags"`
	SecondaryMetrics               types.List    `tfsdk:"secondary_metrics"`
	SequentialTesting              types.Bool    `tfsdk:"sequential_testing"`
	Status                         types.String  `tfsdk:"status"`
	Tags                           types.List    `tfsdk:"tags"`
	TargetApps                     types.List    `tfsdk:"target_apps"`
	TargetExposures                types.Int64   `tfsdk:"target_exposures"`
	TargetingGateId                types.String  `tfsdk:"targeting_gate_id"`
	Team                           types.String  `tfsdk:"team"`
}

var _ basetypes.ObjectTypable = GroupsType{}

type GroupsType struct {
	basetypes.ObjectType
}

func (t GroupsType) Equal(o attr.Type) bool {
	other, ok := o.(GroupsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GroupsType) String() string {
	return "GroupsType"
}

func (t GroupsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return nil, diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.BoolValue, was: %T`, disabledAttribute))
	}

	foreignGroupIdAttribute, ok := attributes["foreign_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`foreign_group_id is missing from object`)

		return nil, diags
	}

	foreignGroupIdVal, ok := foreignGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`foreign_group_id expected to be basetypes.StringValue, was: %T`, foreignGroupIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	parameterValuesAttribute, ok := attributes["parameter_values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parameter_values is missing from object`)

		return nil, diags
	}

	parameterValuesVal, ok := parameterValuesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parameter_values expected to be basetypes.MapValue, was: %T`, parameterValuesAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return nil, diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.Float64Value, was: %T`, sizeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GroupsValue{
		Description:     descriptionVal,
		Disabled:        disabledVal,
		ForeignGroupId:  foreignGroupIdVal,
		Id:              idVal,
		Name:            nameVal,
		ParameterValues: parameterValuesVal,
		Size:            sizeVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewGroupsValueNull() GroupsValue {
	return GroupsValue{
		state: attr.ValueStateNull,
	}
}

func NewGroupsValueUnknown() GroupsValue {
	return GroupsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGroupsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GroupsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GroupsValue Attribute Value",
				"While creating a GroupsValue value, a missing attribute value was detected. "+
					"A GroupsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GroupsValue Attribute Type",
				"While creating a GroupsValue value, an invalid attribute value was detected. "+
					"A GroupsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GroupsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GroupsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GroupsValue Attribute Value",
				"While creating a GroupsValue value, an extra attribute value was detected. "+
					"A GroupsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GroupsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGroupsValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	disabledAttribute, ok := attributes["disabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`disabled is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	disabledVal, ok := disabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`disabled expected to be basetypes.BoolValue, was: %T`, disabledAttribute))
	}

	foreignGroupIdAttribute, ok := attributes["foreign_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`foreign_group_id is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	foreignGroupIdVal, ok := foreignGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`foreign_group_id expected to be basetypes.StringValue, was: %T`, foreignGroupIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	parameterValuesAttribute, ok := attributes["parameter_values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`parameter_values is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	parameterValuesVal, ok := parameterValuesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`parameter_values expected to be basetypes.MapValue, was: %T`, parameterValuesAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return NewGroupsValueUnknown(), diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.Float64Value, was: %T`, sizeAttribute))
	}

	if diags.HasError() {
		return NewGroupsValueUnknown(), diags
	}

	return GroupsValue{
		Description:     descriptionVal,
		Disabled:        disabledVal,
		ForeignGroupId:  foreignGroupIdVal,
		Id:              idVal,
		Name:            nameVal,
		ParameterValues: parameterValuesVal,
		Size:            sizeVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewGroupsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GroupsValue {
	object, diags := NewGroupsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGroupsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GroupsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGroupsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGroupsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGroupsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGroupsValueMust(GroupsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GroupsType) ValueType(ctx context.Context) attr.Value {
	return GroupsValue{}
}

var _ basetypes.ObjectValuable = GroupsValue{}

type GroupsValue struct {
	Description     basetypes.StringValue  `tfsdk:"description"`
	Disabled        basetypes.BoolValue    `tfsdk:"disabled"`
	ForeignGroupId  basetypes.StringValue  `tfsdk:"foreign_group_id"`
	Id              basetypes.StringValue  `tfsdk:"id"`
	Name            basetypes.StringValue  `tfsdk:"name"`
	ParameterValues basetypes.MapValue     `tfsdk:"parameter_values"`
	Size            basetypes.Float64Value `tfsdk:"size"`
	state           attr.ValueState
}

func (v GroupsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["disabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["foreign_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["parameter_values"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["size"] = basetypes.Float64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Disabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["disabled"] = val

		val, err = v.ForeignGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["foreign_group_id"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.ParameterValues.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["parameter_values"] = val

		val, err = v.Size.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GroupsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GroupsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GroupsValue) String() string {
	return "GroupsValue"
}

func (v GroupsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	parameterValuesVal, d := types.MapValue(types.StringType, v.ParameterValues.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"description":      basetypes.StringType{},
			"disabled":         basetypes.BoolType{},
			"foreign_group_id": basetypes.StringType{},
			"id":               basetypes.StringType{},
			"name":             basetypes.StringType{},
			"parameter_values": basetypes.MapType{
				ElemType: types.StringType,
			},
			"size": basetypes.Float64Type{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"description":      basetypes.StringType{},
			"disabled":         basetypes.BoolType{},
			"foreign_group_id": basetypes.StringType{},
			"id":               basetypes.StringType{},
			"name":             basetypes.StringType{},
			"parameter_values": basetypes.MapType{
				ElemType: types.StringType,
			},
			"size": basetypes.Float64Type{},
		},
		map[string]attr.Value{
			"description":      v.Description,
			"disabled":         v.Disabled,
			"foreign_group_id": v.ForeignGroupId,
			"id":               v.Id,
			"name":             v.Name,
			"parameter_values": parameterValuesVal,
			"size":             v.Size,
		})

	return objVal, diags
}

func (v GroupsValue) Equal(o attr.Value) bool {
	other, ok := o.(GroupsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Disabled.Equal(other.Disabled) {
		return false
	}

	if !v.ForeignGroupId.Equal(other.ForeignGroupId) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.ParameterValues.Equal(other.ParameterValues) {
		return false
	}

	if !v.Size.Equal(other.Size) {
		return false
	}

	return true
}

func (v GroupsValue) Type(ctx context.Context) attr.Type {
	return GroupsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GroupsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description":      basetypes.StringType{},
		"disabled":         basetypes.BoolType{},
		"foreign_group_id": basetypes.StringType{},
		"id":               basetypes.StringType{},
		"name":             basetypes.StringType{},
		"parameter_values": basetypes.MapType{
			ElemType: types.StringType,
		},
		"size": basetypes.Float64Type{},
	}
}

var _ basetypes.ObjectTypable = LinksType{}

type LinksType struct {
	basetypes.ObjectType
}

func (t LinksType) Equal(o attr.Type) bool {
	other, ok := o.(LinksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LinksType) String() string {
	return "LinksType"
}

func (t LinksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return nil, diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return nil, diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LinksValue{
		Title: titleVal,
		Url:   urlVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLinksValueNull() LinksValue {
	return LinksValue{
		state: attr.ValueStateNull,
	}
}

func NewLinksValueUnknown() LinksValue {
	return LinksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLinksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LinksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LinksValue Attribute Value",
				"While creating a LinksValue value, a missing attribute value was detected. "+
					"A LinksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LinksValue Attribute Type",
				"While creating a LinksValue value, an invalid attribute value was detected. "+
					"A LinksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LinksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LinksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LinksValue Attribute Value",
				"While creating a LinksValue value, an extra attribute value was detected. "+
					"A LinksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LinksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLinksValueUnknown(), diags
	}

	titleAttribute, ok := attributes["title"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`title is missing from object`)

		return NewLinksValueUnknown(), diags
	}

	titleVal, ok := titleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`title expected to be basetypes.StringValue, was: %T`, titleAttribute))
	}

	urlAttribute, ok := attributes["url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`url is missing from object`)

		return NewLinksValueUnknown(), diags
	}

	urlVal, ok := urlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`url expected to be basetypes.StringValue, was: %T`, urlAttribute))
	}

	if diags.HasError() {
		return NewLinksValueUnknown(), diags
	}

	return LinksValue{
		Title: titleVal,
		Url:   urlVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLinksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LinksValue {
	object, diags := NewLinksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLinksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LinksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLinksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLinksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLinksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLinksValueMust(LinksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LinksType) ValueType(ctx context.Context) attr.Value {
	return LinksValue{}
}

var _ basetypes.ObjectValuable = LinksValue{}

type LinksValue struct {
	Title basetypes.StringValue `tfsdk:"title"`
	Url   basetypes.StringValue `tfsdk:"url"`
	state attr.ValueState
}

func (v LinksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["title"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Title.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["title"] = val

		val, err = v.Url.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LinksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LinksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LinksValue) String() string {
	return "LinksValue"
}

func (v LinksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"title": basetypes.StringType{},
			"url":   basetypes.StringType{},
		},
		map[string]attr.Value{
			"title": v.Title,
			"url":   v.Url,
		})

	return objVal, diags
}

func (v LinksValue) Equal(o attr.Value) bool {
	other, ok := o.(LinksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Title.Equal(other.Title) {
		return false
	}

	if !v.Url.Equal(other.Url) {
		return false
	}

	return true
}

func (v LinksValue) Type(ctx context.Context) attr.Type {
	return LinksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LinksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"title": basetypes.StringType{},
		"url":   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PrimaryMetricsType{}

type PrimaryMetricsType struct {
	basetypes.ObjectType
}

func (t PrimaryMetricsType) Equal(o attr.Type) bool {
	other, ok := o.(PrimaryMetricsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PrimaryMetricsType) String() string {
	return "PrimaryMetricsType"
}

func (t PrimaryMetricsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	directionAttribute, ok := attributes["direction"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`direction is missing from object`)

		return nil, diags
	}

	directionVal, ok := directionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`direction expected to be basetypes.StringValue, was: %T`, directionAttribute))
	}

	hypothesizedValueAttribute, ok := attributes["hypothesized_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hypothesized_value is missing from object`)

		return nil, diags
	}

	hypothesizedValueVal, ok := hypothesizedValueAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hypothesized_value expected to be basetypes.Float64Value, was: %T`, hypothesizedValueAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PrimaryMetricsValue{
		Direction:          directionVal,
		HypothesizedValue:  hypothesizedValueVal,
		Name:               nameVal,
		PrimaryMetricsType: typeVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewPrimaryMetricsValueNull() PrimaryMetricsValue {
	return PrimaryMetricsValue{
		state: attr.ValueStateNull,
	}
}

func NewPrimaryMetricsValueUnknown() PrimaryMetricsValue {
	return PrimaryMetricsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPrimaryMetricsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PrimaryMetricsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PrimaryMetricsValue Attribute Value",
				"While creating a PrimaryMetricsValue value, a missing attribute value was detected. "+
					"A PrimaryMetricsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrimaryMetricsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PrimaryMetricsValue Attribute Type",
				"While creating a PrimaryMetricsValue value, an invalid attribute value was detected. "+
					"A PrimaryMetricsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PrimaryMetricsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PrimaryMetricsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PrimaryMetricsValue Attribute Value",
				"While creating a PrimaryMetricsValue value, an extra attribute value was detected. "+
					"A PrimaryMetricsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PrimaryMetricsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPrimaryMetricsValueUnknown(), diags
	}

	directionAttribute, ok := attributes["direction"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`direction is missing from object`)

		return NewPrimaryMetricsValueUnknown(), diags
	}

	directionVal, ok := directionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`direction expected to be basetypes.StringValue, was: %T`, directionAttribute))
	}

	hypothesizedValueAttribute, ok := attributes["hypothesized_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hypothesized_value is missing from object`)

		return NewPrimaryMetricsValueUnknown(), diags
	}

	hypothesizedValueVal, ok := hypothesizedValueAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hypothesized_value expected to be basetypes.Float64Value, was: %T`, hypothesizedValueAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewPrimaryMetricsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewPrimaryMetricsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewPrimaryMetricsValueUnknown(), diags
	}

	return PrimaryMetricsValue{
		Direction:          directionVal,
		HypothesizedValue:  hypothesizedValueVal,
		Name:               nameVal,
		PrimaryMetricsType: typeVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewPrimaryMetricsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PrimaryMetricsValue {
	object, diags := NewPrimaryMetricsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPrimaryMetricsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PrimaryMetricsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPrimaryMetricsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPrimaryMetricsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPrimaryMetricsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPrimaryMetricsValueMust(PrimaryMetricsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PrimaryMetricsType) ValueType(ctx context.Context) attr.Value {
	return PrimaryMetricsValue{}
}

var _ basetypes.ObjectValuable = PrimaryMetricsValue{}

type PrimaryMetricsValue struct {
	Direction          basetypes.StringValue  `tfsdk:"direction"`
	HypothesizedValue  basetypes.Float64Value `tfsdk:"hypothesized_value"`
	Name               basetypes.StringValue  `tfsdk:"name"`
	PrimaryMetricsType basetypes.StringValue  `tfsdk:"type"`
	state              attr.ValueState
}

func (v PrimaryMetricsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["direction"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hypothesized_value"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Direction.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["direction"] = val

		val, err = v.HypothesizedValue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hypothesized_value"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PrimaryMetricsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PrimaryMetricsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PrimaryMetricsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PrimaryMetricsValue) String() string {
	return "PrimaryMetricsValue"
}

func (v PrimaryMetricsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"direction":          basetypes.StringType{},
			"hypothesized_value": basetypes.Float64Type{},
			"name":               basetypes.StringType{},
			"type":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"direction":          v.Direction,
			"hypothesized_value": v.HypothesizedValue,
			"name":               v.Name,
			"type":               v.PrimaryMetricsType,
		})

	return objVal, diags
}

func (v PrimaryMetricsValue) Equal(o attr.Value) bool {
	other, ok := o.(PrimaryMetricsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Direction.Equal(other.Direction) {
		return false
	}

	if !v.HypothesizedValue.Equal(other.HypothesizedValue) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PrimaryMetricsType.Equal(other.PrimaryMetricsType) {
		return false
	}

	return true
}

func (v PrimaryMetricsValue) Type(ctx context.Context) attr.Type {
	return PrimaryMetricsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PrimaryMetricsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"direction":          basetypes.StringType{},
		"hypothesized_value": basetypes.Float64Type{},
		"name":               basetypes.StringType{},
		"type":               basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SecondaryMetricsType{}

type SecondaryMetricsType struct {
	basetypes.ObjectType
}

func (t SecondaryMetricsType) Equal(o attr.Type) bool {
	other, ok := o.(SecondaryMetricsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SecondaryMetricsType) String() string {
	return "SecondaryMetricsType"
}

func (t SecondaryMetricsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	directionAttribute, ok := attributes["direction"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`direction is missing from object`)

		return nil, diags
	}

	directionVal, ok := directionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`direction expected to be basetypes.StringValue, was: %T`, directionAttribute))
	}

	hypothesizedValueAttribute, ok := attributes["hypothesized_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hypothesized_value is missing from object`)

		return nil, diags
	}

	hypothesizedValueVal, ok := hypothesizedValueAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hypothesized_value expected to be basetypes.Float64Value, was: %T`, hypothesizedValueAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SecondaryMetricsValue{
		Direction:            directionVal,
		HypothesizedValue:    hypothesizedValueVal,
		Name:                 nameVal,
		SecondaryMetricsType: typeVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewSecondaryMetricsValueNull() SecondaryMetricsValue {
	return SecondaryMetricsValue{
		state: attr.ValueStateNull,
	}
}

func NewSecondaryMetricsValueUnknown() SecondaryMetricsValue {
	return SecondaryMetricsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSecondaryMetricsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SecondaryMetricsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SecondaryMetricsValue Attribute Value",
				"While creating a SecondaryMetricsValue value, a missing attribute value was detected. "+
					"A SecondaryMetricsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecondaryMetricsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SecondaryMetricsValue Attribute Type",
				"While creating a SecondaryMetricsValue value, an invalid attribute value was detected. "+
					"A SecondaryMetricsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SecondaryMetricsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SecondaryMetricsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SecondaryMetricsValue Attribute Value",
				"While creating a SecondaryMetricsValue value, an extra attribute value was detected. "+
					"A SecondaryMetricsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SecondaryMetricsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSecondaryMetricsValueUnknown(), diags
	}

	directionAttribute, ok := attributes["direction"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`direction is missing from object`)

		return NewSecondaryMetricsValueUnknown(), diags
	}

	directionVal, ok := directionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`direction expected to be basetypes.StringValue, was: %T`, directionAttribute))
	}

	hypothesizedValueAttribute, ok := attributes["hypothesized_value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hypothesized_value is missing from object`)

		return NewSecondaryMetricsValueUnknown(), diags
	}

	hypothesizedValueVal, ok := hypothesizedValueAttribute.(basetypes.Float64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hypothesized_value expected to be basetypes.Float64Value, was: %T`, hypothesizedValueAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewSecondaryMetricsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewSecondaryMetricsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewSecondaryMetricsValueUnknown(), diags
	}

	return SecondaryMetricsValue{
		Direction:            directionVal,
		HypothesizedValue:    hypothesizedValueVal,
		Name:                 nameVal,
		SecondaryMetricsType: typeVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewSecondaryMetricsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SecondaryMetricsValue {
	object, diags := NewSecondaryMetricsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSecondaryMetricsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SecondaryMetricsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSecondaryMetricsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSecondaryMetricsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSecondaryMetricsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSecondaryMetricsValueMust(SecondaryMetricsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SecondaryMetricsType) ValueType(ctx context.Context) attr.Value {
	return SecondaryMetricsValue{}
}

var _ basetypes.ObjectValuable = SecondaryMetricsValue{}

type SecondaryMetricsValue struct {
	Direction            basetypes.StringValue  `tfsdk:"direction"`
	HypothesizedValue    basetypes.Float64Value `tfsdk:"hypothesized_value"`
	Name                 basetypes.StringValue  `tfsdk:"name"`
	SecondaryMetricsType basetypes.StringValue  `tfsdk:"type"`
	state                attr.ValueState
}

func (v SecondaryMetricsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["direction"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hypothesized_value"] = basetypes.Float64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Direction.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["direction"] = val

		val, err = v.HypothesizedValue.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hypothesized_value"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SecondaryMetricsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SecondaryMetricsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SecondaryMetricsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SecondaryMetricsValue) String() string {
	return "SecondaryMetricsValue"
}

func (v SecondaryMetricsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"direction":          basetypes.StringType{},
			"hypothesized_value": basetypes.Float64Type{},
			"name":               basetypes.StringType{},
			"type":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"direction":          v.Direction,
			"hypothesized_value": v.HypothesizedValue,
			"name":               v.Name,
			"type":               v.SecondaryMetricsType,
		})

	return objVal, diags
}

func (v SecondaryMetricsValue) Equal(o attr.Value) bool {
	other, ok := o.(SecondaryMetricsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Direction.Equal(other.Direction) {
		return false
	}

	if !v.HypothesizedValue.Equal(other.HypothesizedValue) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SecondaryMetricsType.Equal(other.SecondaryMetricsType) {
		return false
	}

	return true
}

func (v SecondaryMetricsValue) Type(ctx context.Context) attr.Type {
	return SecondaryMetricsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SecondaryMetricsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"direction":          basetypes.StringType{},
		"hypothesized_value": basetypes.Float64Type{},
		"name":               basetypes.StringType{},
		"type":               basetypes.StringType{},
	}
}
